// This file is @generated by prost-build.
/// / 用户事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyticsEvent {
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<EventContext>,
    #[prost(
        oneof = "analytics_event::EventType",
        tags = "8, 9, 10, 11, 12, 13, 14, 15, 16, 17"
    )]
    pub event_type: ::core::option::Option<analytics_event::EventType>,
}
/// Nested message and enum types in `AnalyticsEvent`.
pub mod analytics_event {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EventType {
        #[prost(message, tag = "8")]
        AppStart(super::AppStartEvent),
        #[prost(message, tag = "9")]
        AppExit(super::AppExitEvent),
        #[prost(message, tag = "10")]
        UserLogin(super::UserLoginEvent),
        #[prost(message, tag = "11")]
        UserLogout(super::UserLogoutEvent),
        #[prost(message, tag = "12")]
        UserRegister(super::UserRegisterEvent),
        #[prost(message, tag = "13")]
        ChatCreated(super::ChatCreatedEvent),
        #[prost(message, tag = "14")]
        MessageSent(super::MessageSentEvent),
        #[prost(message, tag = "15")]
        ChatJoined(super::ChatJoinedEvent),
        #[prost(message, tag = "16")]
        ChatLeft(super::ChatLeftEvent),
        #[prost(message, tag = "17")]
        Navigation(super::NavigationEvent),
    }
}
/// / 应用启动事件
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AppStartEvent {}
/// / 应用退出事件
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AppExitEvent {
    #[prost(enumeration = "app_exit_event::ExitCode", tag = "1")]
    pub exit_code: i32,
}
/// Nested message and enum types in `AppExitEvent`.
pub mod app_exit_event {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ExitCode {
        Unspecified = 0,
        Success = 1,
        Failure = 2,
    }
    impl ExitCode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "EXIT_CODE_UNSPECIFIED",
                Self::Success => "EXIT_CODE_SUCCESS",
                Self::Failure => "EXIT_CODE_FAILURE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "EXIT_CODE_UNSPECIFIED" => Some(Self::Unspecified),
                "EXIT_CODE_SUCCESS" => Some(Self::Success),
                "EXIT_CODE_FAILURE" => Some(Self::Failure),
                _ => None,
            }
        }
    }
}
/// / 用户登录事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserLoginEvent {
    /// / 用户邮箱(Email 是 PII，需要脱敏)
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
}
/// / 用户登出事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserLogoutEvent {
    /// / 用户邮箱(Email 是 PII，需要脱敏)
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
}
/// / 用户注册事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserRegisterEvent {
    /// / 用户邮箱(Email 是 PII，需要脱敏)
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    /// / 工作空间 ID
    #[prost(string, tag = "2")]
    pub workspace_id: ::prost::alloc::string::String,
}
/// / chat 创建事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatCreatedEvent {
    /// / 工作空间 ID
    #[prost(string, tag = "1")]
    pub workspace_id: ::prost::alloc::string::String,
}
/// / 消息发送事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageSentEvent {
    /// / chat ID
    #[prost(string, tag = "1")]
    pub chat_id: ::prost::alloc::string::String,
    /// / 消息类型
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
    /// / 消息大小
    #[prost(int32, tag = "3")]
    pub size: i32,
    /// / 附件数量
    #[prost(int32, tag = "4")]
    pub total_files: i32,
}
/// / 加入聊天事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatJoinedEvent {
    /// / chat ID
    #[prost(string, tag = "1")]
    pub chat_id: ::prost::alloc::string::String,
}
/// / 离开聊天事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatLeftEvent {
    /// / chat ID
    #[prost(string, tag = "1")]
    pub chat_id: ::prost::alloc::string::String,
}
/// / 页面切换事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NavigationEvent {
    /// / 当前页面
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    /// / 目标页面
    #[prost(string, tag = "2")]
    pub to: ::prost::alloc::string::String,
}
/// / 事件上下文
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventContext {
    /// / 客户端 ID
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
    /// / 应用版本
    #[prost(string, tag = "2")]
    pub app_version: ::prost::alloc::string::String,
    /// / 系统信息
    #[prost(message, optional, tag = "3")]
    pub system: ::core::option::Option<SystemInfo>,
    /// / 用户 ID
    #[prost(string, tag = "4")]
    pub user_id: ::prost::alloc::string::String,
    /// / 客户端 IP
    #[prost(string, tag = "5")]
    pub ip: ::prost::alloc::string::String,
    /// / 用户代理
    #[prost(string, tag = "6")]
    pub user_agent: ::prost::alloc::string::String,
    /// / 地理位置
    #[prost(message, optional, tag = "7")]
    pub geo: ::core::option::Option<GeoLocation>,
    /// / 客户端时间戳
    #[prost(int64, tag = "8")]
    pub client_ts: i64,
    /// / 服务器时间戳
    #[prost(int64, tag = "9")]
    pub server_ts: i64,
}
/// / 系统信息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemInfo {
    /// / 操作系统
    #[prost(string, tag = "1")]
    pub os: ::prost::alloc::string::String,
    /// / 系统架构
    #[prost(string, tag = "2")]
    pub arch: ::prost::alloc::string::String,
    /// / 用户语言
    #[prost(string, tag = "3")]
    pub locale: ::prost::alloc::string::String,
    /// / 用户时区
    #[prost(string, tag = "4")]
    pub timezone: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GeoLocation {
    #[prost(string, tag = "1")]
    pub country: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub region: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub city: ::prost::alloc::string::String,
}
